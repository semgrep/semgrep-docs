const fs = require('fs');
const path = require('path');

// Helper function to parse frontmatter title from markdown files
function extractTitle(filePath) {
  try {
    if (!fs.existsSync(filePath)) return null;
    
    const content = fs.readFileSync(filePath, 'utf8');
    const frontmatterMatch = content.match(/^---\n(.*?)\n---/s);
    
    if (frontmatterMatch) {
      const frontmatter = frontmatterMatch[1];
      const titleMatch = frontmatter.match(/^title:\s*(.*)$/m);
      if (titleMatch) {
        return titleMatch[1].replace(/^['"]|['"]$/g, ''); // Remove quotes
      }
    }
    
    // Fallback: look for first # heading
    const headingMatch = content.match(/^#\s+(.*)$/m);
    if (headingMatch) {
      return headingMatch[1];
    }
    
    return null;
  } catch (error) {
    return null;
  }
}

// Helper function to convert folder name to display name
function formatCategoryName(folderName) {
  return folderName
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

function updateVulnerabilityCategories() {
  const vulnerabilitiesPath = path.join(__dirname, '..', 'docs', 'learn', 'vulnerabilities');
  const componentPath = path.join(__dirname, '..', 'src', 'components', 'VulnerabilityCategories.js');
  
  try {
    // Read all items in the vulnerabilities directory
    const items = fs.readdirSync(vulnerabilitiesPath);
    
    // Filter for directories only and exclude overview files
    const categories = items
      .filter(item => {
        const itemPath = path.join(vulnerabilitiesPath, item);
        return fs.statSync(itemPath).isDirectory();
      })
      .map(dirName => {
        const overviewPath = path.join(vulnerabilitiesPath, dirName, 'overview.md');
        const title = extractTitle(overviewPath) || formatCategoryName(dirName);
        
        return {
          name: dirName,
          title: title,
          path: `/docs/learn/vulnerabilities/${dirName}`
        };
      })
      .sort((a, b) => a.title.localeCompare(b.title));

    // Read the current component file
    let componentContent = fs.readFileSync(componentPath, 'utf8');
    
    // Generate the new categories array as a formatted string
    const categoriesArray = JSON.stringify(categories, null, 4);
    
    // Replace the categories array in the component
    const updatedContent = componentContent.replace(
      /const categories = \[[\s\S]*?\];/,
      `const categories = ${categoriesArray};`
    );
    
    // Write the updated component back to file
    fs.writeFileSync(componentPath, updatedContent);
    
    console.log(`✅ Updated VulnerabilityCategories.js with ${categories.length} categories:`);
    categories.forEach(cat => console.log(`  - ${cat.title}`));
    
  } catch (error) {
    console.error('❌ Error updating vulnerability categories:', error.message);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  updateVulnerabilityCategories();
}

module.exports = { updateVulnerabilityCategories };